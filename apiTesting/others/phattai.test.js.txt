const request = require('supertest')
const { assert } = require("chai");
const data = require("../testData/data.js");
const apilist = require("../source_apiList/apiPhattai.js");
// const com = require("../commons/commons.js");

let Cookies;
let getBanksDeposit;
describe('Suite 1: Register and create Sessions:', () => {
    test('TC1: Check register account with already exist', async () => {
        let reg = {
            username: "jimbi03",
            password: "123456",
            confirmPassword: "123456",
            phone: "0987654321",
        }
        const res = await request(data.baseUrl)
            .post(apilist.register)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .send(reg);
        if (res.body.code === 500) {
            console.log("Code: " + res.body.code + "  -  " + "message: " + res.body.message);
            assert.equal(res.body.message, "Tài khoản đã tồn tại");
        }
        else if(res.body.code === 400) 
        {
            console.log("Code: " + res.body.code + "  -  " + "message: " + res.body.message);
            assert.equal(res.body.message, "Có lỗi khi đăng ký.Vui lòng thử lại");
        }
    }),
    test("TC2: Check register account successfully", async () =>{
        let reg1 = {
            confirmPassword: data.password,
            password: data.password,
            phone: data.phone,
            username: data.username 
        }
        const res = await request(data.baseUrl)
            .post(apilist.register)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .send(reg1);
        if(res.body.code === 200){
            console.log("Code: " + res.body.code + "  -  " + "message: " + res.body.message);
            assert.equal(res.body.message, "Register successful");
        }
        else{
            console.log("Code: " + res.body.code + "  -  " + "message: " + res.body.message);
            assert.equal(res.body.message, "Phát hiện hành vi không cho phép. Liên hệ CSKH để được hỗ trợ");
        }
    })
});
describe("Suite 2: Login and create Sessions:", () => {
    test("TC3: Check login with invalid user", async () => {
        let user = { username: "jimbi036", password: "3465346" };
        const res = await request(data.baseUrl)
            .post(apilist.login)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .send(user);
        console.log("Code: " + res.body.code + "  -  " + "message: " + res.body.message);
        assert.equal(res.body.code, 404);
        assert.equal(res.body.message, "Không tìm thấy người dùng");
    }),
    test("TC4: Check login with valid user", async () => {
        // com.login(autocheck,123456);
        let user = { username: "autocheck", password: "123456" };
        const res = await request(data.baseUrl)
            .post(apilist.login)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .send(user);
        console.log(data.agent);
        Cookies = res.headers["set-cookie"].pop().split(";")[0];
        console.log("Code: " + res.body.code + "  -  " + "message: " + res.body.message);
        console.log(Cookies);
        assert.equal(res.body.code, 200);
        assert.equal(res.body.message, "Đăng nhập thành công");
    })
}),

describe("Suite 3: Check deposit - withdraw methods", () => {
    test("TC5: Check get banks of deposit manual method", async () => {
        const res = await request(data.baseUrl)
            .get(apilist.deposit)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
        assert.equal(res.body.code, 200);
        getBanksDeposit = res.body.data.banks;
        const banks = res.body.data.banks.map(x => x.bank_code);
        if(banks){
            console.log("bank of deposit ==================== [" + banks + "]");
        }
    }),
    test("TC6: Check Deposit manual method", async () => {
        let manualdeposit = {
            amount_deposit: 50,
            bank_account_no: "",
            bank_code: "",
            bank_trancode: "2134242",
            branch_name: getBanksDeposit[0].branch_name,
            from_bank_name: "jimbi abcd",
            method: "ibanking",
            package_id: "1",
            to_bank_code: getBanksDeposit[0].bank_code,
            to_bank_name: getBanksDeposit[0].bank_name,
            to_bank_no: getBanksDeposit[0].account_no
        }
        const res = await request(data.baseUrl)
            .post(apilist.depositbank)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
            .send(manualdeposit);
        assert.equal(res.body.code, 200);
        assert.equal(res.body.message, "Create Invoice successfully.");
        assert.equal(res.body.status, "OK");
        console.log("depositbank: " + res.body.message);
    }),
    
    test("TC7: Check get promotion packages", async () => {
        const res = await request(data.baseUrl)
            .get(apilist.deposit)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
        assert.equal(res.body.code, 200);
        const packages = res.body.data.packages.map(x => x.id);
        if(packages){
            console.log("Packages: ===================== [" + packages + "]");
        }
    }),
    test("TC8: Check get momo accounts", async () => {
        const res = await request(data.baseUrl)
            .get(apilist.deposit)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
        assert.equal(res.body.code, 200);
        const momos = res.body.data.momos.map(x => x.account_no);
        if(!momos){
            console.log("Momo: Không có account để hiển thị");
        }
        else if(momos){
            console.log("Momo: ===================== [" + momos + "]");
        }
    }),
    test("TC9: Check get withdrawBanks accounts", async () => {
        const res = await request(data.baseUrl)
            .get(apilist.deposit)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
        assert.equal(res.body.code, 200);
        const withdrawBank = res.body.data.withdrawBanks.map(x => x.bank_name);
        if(withdrawBank){
            console.log("withdrawBanks: ===================== [" + withdrawBank + "]");
        }
        else{
            console.log("withdrawBanks: Không có Bank để hiển thị");
        }
    }),
    test("TC10: Check get autoBanks accounts", async () => {
        const res = await request(data.baseUrl)
            .get(apilist.deposit)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
        assert.equal(res.body.code, 200);
        const autoBanks = res.body.data.autoBanks.map(x => x.bank_name);
        if(autoBanks){
            console.log("autoBanks: ===================== [" + autoBanks + "]");
        }
        else if(!autoBanks){
            console.log("autoBanks: Không có Bank để hiển thị");
        }
    }),

    test("TC11: Check get list Cards", async () => {
        const res = await request(data.baseUrl)
            .get(apilist.getCard)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
        assert.equal(res.body.status, 1);
        const list = [];
        for(let cardList of Object.keys(res.body.cardlist)){
            list.push(cardList);
        }
        console.log("List cards:    [" + list + "]");
        const expected = ["VIETTEL", "MOBIFONE", "VINAPHONE"];
        assert.deepEqual(expected, list);
    }),
    test("TC12: Check Deposit card", async () => {
        let depositCard = {
            card_amount: 10000,
            card_code: "45678865765",
            card_serial: "4356767768",
            card_status: "1",
            from_bank_name: "jimbi test auto",
            to_telcom_code: "VIETTEL"
        }
        const res = await request(data.baseUrl)
            .post(apilist.depositCard)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
            .send(depositCard);
        assert.equal(res.body.code, 200);
        assert.equal(res.body.status, "OK");
        console.log("depositCard: " + res.body.message);
    })
    
}),


describe("Suite 4: Check hero banner and Hot games", () => {
    test("TC13: Check get hero banner", async () => {
        const res = await request(data.baseUrl)
            .get(apilist.homeSlider)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
        assert.equal(res.body.code, 200);
        const banner_data = res.body.data.map(x => x.image);
        if(banner_data){
            console.log(banner_data);
        }
    }),
    test("TC14: Check get Hot Games", async () => {
        const res = await request(data.baseUrl)
            .get(apilist.homefav)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
        assert.equal(res.body.code, 200);
        const fav_data = res.body.data.map(x => x.name);
        if(fav_data){
            console.log("List favorite games:  [" + fav_data + "]");
            expect(fav_data.join(",")).toContain("Thể Thao,Casino,Virtual Sports,inGame,Lottery,Nổ Hũ,Keno,Numbers Game,Trò Chơi Ảo,E-Sports,Quay Số");
        }
    })
    // test("Check get Hotmatch", async () => {
    //     const res = await request(data.baseUrl)
    //         .get(apilist.hotmatch)
    //         .set("content-type", data.contenttype)
    //         .set("user-agent", data.agent)
    //         .set("cookie", Cookies)
    //     assert.equal(res.body.code, 200);
    // }),
    // test("Check get top winner", async () => {
    //     const res = await request(data.baseUrl)
    //         .get(apilist.topwinner)
    //         .set("content-type", data.contenttype)
    //         .set("user-agent", data.agent)
    //         .set("cookie", Cookies)
    //     assert.equal(res.body.code, 200);
    // })
})

describe("Suite 4: Check hero banner and Hot games", () => {
    test("TC15: Check Sports athena", async () => {
        const res = await request(data.baseUrl)
            .get(apilist.sports)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
        assert.equal(res.body.code, 200);
        const sport = res.body.data.url;
        if(sport){
            // expect(res.body.data.url).toContain("k8q9mb.fg6666.com");
            console.log("link sports: " + sport);
        }
    }),
    test("TC16: Check vsSports athena", async () => {
        const res = await request(data.baseUrl)
            .get(apilist.vsSports)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
        assert.equal(res.body.code, 200)     
        const vssport = res.body.data.url;
        if(vssport){
            // expect(res.body.data.url).toContain("k8q9mb.kh5688.com");
            console.log("link sports: " + vssport);
        }
    }),
    test("TC17: Check get fishing list", async () => {
        const res = await request(data.baseUrl)
            .get(apilist.fishing)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
        assert.equal(res.body.code, 200);
        const fishing = res.body.data.fishing.items.map(x => x.id);
        const expected = [1,154,155,184,185,190];
        console.log("link sports: [ " + fishing + " ]");
        assert.deepEqual(expected, fishing);
    }),
    test("TC18: Check get jackpot list", async () => {
        const res = await request(data.baseUrl)
            .get(apilist.jackpot)
            .set("content-type", data.contenttype)
            .set("user-agent", data.agent)
            .set("cookie", Cookies)
        assert.equal(res.body.code, 200);
        assert.equal(res.body.status, "OK");
    })
})

